# -*- coding: utf-8 -*-
"""Automated_Breast Cancer Prediction System.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17DeXT2VIAqWDyfaRmqb6hV1znakYXRC5

##**Automated Breast Cancer Prediction**
#Load Dataset
"""

import pandas as pd
dataset=pd.read_csv("dataset.csv")
dataset.head()

from sklearn.preprocessing import LabelEncoder
lb=LabelEncoder()
dataset.iloc[:,1]=lb.fit_transform(dataset.iloc[:,1])  
dataset.head(10)



"""#Data Cleaning"""

dataset.drop(columns= ['Unnamed: 32','id'], inplace= True)
dataset.head()

dataset.shape

x=dataset.iloc[:,1:-1]
y=dataset.iloc[:,0]
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.1)
x



y



"""#Normalizing"""

from sklearn.preprocessing import MinMaxScaler
mms=MinMaxScaler()
x_train_norm=mms.fit_transform(x_train)
x_test_norm=mms.fit_transform(x_test)
x_train_norm

x_test_norm

"""#Standred Scalling"""

from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
x_train_sc=sc.fit_transform(x_train)
x_test_sc=sc.fit_transform(x_test)
x_train_sc

x_test_sc



"""#Statistical Analysis"""

import pandas as pd
import numpy as np 
import matplotlib.pyplot as plt
import seaborn as sns
dataset=pd.read_csv('dataset.csv')
dataset.head()

dataset['diagnosis'].unique()

"""##Count Plot"""

plt.figure(figsize=(10,5))
sns.countplot(dataset['diagnosis'])

plt.figure(figsize=(15,10))
sns.countplot(dataset['radius_mean'])

plt.figure(figsize=(15,10))
sns.countplot(dataset['texture_mean'])

plt.figure(figsize=(15,10))
sns.countplot(dataset['perimeter_mean'])

plt.figure(figsize=(15,10))
sns.countplot(dataset['perimeter_mean'])

dataset.info()

dataset.describe()

dataset['radius_mean'].mean()

dataset.describe().plot(kind='area',fontsize=20,figsize=(10,8))
plt.xlabel('statistics')
plt.ylabel('values')
plt.show()

dataset.describe().plot(kind='area',fontsize=20,figsize=(10,8),table=True)
plt.xlabel('statistics')
plt.ylabel('values')
plt.show()

dataset['radius_mean'].median()

dataset['radius_mean'].value_counts()

"""#Pie Plot"""

plt.figure(figsize=(15,10))
dataset['radius_mean'].value_counts().plot.pie(autopct='%1.1f%%',shadow=True)
plt.show()

plt.figure(figsize=(10,8))
dataset['texture_mean'].value_counts().plot.pie(autopct='%1.1f%%',shadow=True)
plt.show()

dataset.isnull().sum()

x1=dataset['radius_mean']==19.690
p=dataset[x1]
p.head()

plt.figure(figsize=(10,8))
dataset['diagnosis'].value_counts().plot.pie(autopct='%1.1f%%',shadow=True)
plt.show()

plt.figure(figsize=(10,8))
dataset['texture_mean'].value_counts().plot.pie(autopct='%1.1f%%',shadow=True)
plt.show()

plt.figure(figsize=(5,5))
plt.scatter(dataset['radius_mean'],dataset['diagnosis'],color='blue')
plt.show()

x=dataset['area_mean']
y=dataset['diagnosis']
plt.scatter(x,y)

dataset.isnull().sum()

plt.figure(figsize=(10,5))
x=dataset['radius_mean']
y=dataset['diagnosis']
plt.scatter(x,y)

"""##Correlation Matrix"""

dataset.corr()

plt.figure(figsize=(15,10))
sns.heatmap(dataset.corr(),annot=True,fmt='1%')

"""##Covarience Matrix"""

dataset.cov()

plt.figure(figsize=(15,10))
sns.heatmap(dataset.cov(),annot=True,fmt='0.01%')

"""##Histogram"""

dataset.hist(column='radius_mean')

dataset.hist(column='area_mean')

dataset.hist(column='radius_worst')



"""#SVM"""

from sklearn import svm
model=svm.SVC()
model.fit(x_train,y_train)
prediction=model.predict(x_test)
prediction

y_test

count_miss=(y_test!=prediction).sum()

count_miss

from sklearn import metrics
accuracy=metrics.accuracy_score(y_test,prediction)
accuracy*100



"""#Decision tree"""

from sklearn import tree,metrics
dtree=tree.DecisionTreeClassifier(criterion='entropy',max_depth=3)
dtree.fit(x_train,y_train)
pred1=dtree.predict(x_test)
acc1=metrics.accuracy_score(y_test,pred1)
acc1*100



"""#Random forest"""

from sklearn import ensemble
rfc=ensemble.RandomForestClassifier(n_estimators=100,criterion='entropy')
rfc.fit(x_train,y_train)
pred2=rfc.predict(x_test)
acc2=metrics.accuracy_score(y_test,pred2)
acc2*100

x_axis=[1,2,3]
y_axis=[accuracy*100,acc1*100,acc2*100]
label=['SVM','Decision tree','Random forest']
plt.bar(x_axis,y_axis,tick_label=label,width=0.6,color=['red','black','blue'])
plt.title('Compare in Different Model')
plt.ylim(90,100)
plt.show

"""#Predict Output
##Random Forest classifier is giving best accuracy so it is used for Prediction
"""

user_input=[[1,32,45,44,56,76,43,23,43,52,7,8,56,74,65,66,12,4,66,77,88,99,7,88,77,66,34,33,78]]
pred=rfc.predict(user_input)
print(pred)

classes={0:"B",1:"M"}
n=[[1,32,45,44,56,76,43,23,43,52,7,8,56,74,65,66,12,4,66,77,88,99,7,88,77,66,34,33,78]]
rfc.predict(n)
print(classes[pred[0]])



"""#Classification report
##Random Forest classifier is giving best accuracy so it is used for classification report
"""

from sklearn.ensemble import RandomForestClassifier
model = RandomForestClassifier()

c_m=metrics.confusion_matrix(y_test,pred2)

c_m

c_r=metrics.classification_report(y_test,pred2)
print(c_r)

